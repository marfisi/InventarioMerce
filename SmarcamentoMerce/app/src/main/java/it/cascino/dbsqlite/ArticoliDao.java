package it.cascino.dbsqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICOLI".
*/
public class ArticoliDao extends AbstractDao<Articoli, Long> {

    public static final String TABLENAME = "ARTICOLI";

    /**
     * Properties of entity Articoli.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Codart = new Property(1, String.class, "codart", false, "CODART");
        public final static Property Desc = new Property(2, String.class, "desc", false, "DESC");
        public final static Property Um = new Property(3, String.class, "um", false, "UM");
        public final static Property Prezzo = new Property(4, float.class, "prezzo", false, "PREZZO");
        public final static Property Qty_per_confez = new Property(5, Float.class, "qty_per_confez", false, "QTY_PER_CONFEZ");
    }

    private DaoSession daoSession;


    public ArticoliDao(DaoConfig config) {
        super(config);
    }
    
    public ArticoliDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARTICOLI\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CODART\" TEXT NOT NULL ," + // 1: codart
                "\"DESC\" TEXT NOT NULL ," + // 2: desc
                "\"UM\" TEXT NOT NULL ," + // 3: um
                "\"PREZZO\" REAL NOT NULL ," + // 4: prezzo
                "\"QTY_PER_CONFEZ\" REAL);"); // 5: qty_per_confez
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARTICOLI\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Articoli entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCodart());
        stmt.bindString(3, entity.getDesc());
        stmt.bindString(4, entity.getUm());
        stmt.bindDouble(5, entity.getPrezzo());
 
        Float qty_per_confez = entity.getQty_per_confez();
        if (qty_per_confez != null) {
            stmt.bindDouble(6, qty_per_confez);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Articoli entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCodart());
        stmt.bindString(3, entity.getDesc());
        stmt.bindString(4, entity.getUm());
        stmt.bindDouble(5, entity.getPrezzo());
 
        Float qty_per_confez = entity.getQty_per_confez();
        if (qty_per_confez != null) {
            stmt.bindDouble(6, qty_per_confez);
        }
    }

    @Override
    protected final void attachEntity(Articoli entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Articoli readEntity(Cursor cursor, int offset) {
        Articoli entity = new Articoli( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // codart
            cursor.getString(offset + 2), // desc
            cursor.getString(offset + 3), // um
            cursor.getFloat(offset + 4), // prezzo
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5) // qty_per_confez
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Articoli entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodart(cursor.getString(offset + 1));
        entity.setDesc(cursor.getString(offset + 2));
        entity.setUm(cursor.getString(offset + 3));
        entity.setPrezzo(cursor.getFloat(offset + 4));
        entity.setQty_per_confez(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Articoli entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Articoli entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Articoli entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
