package it.cascino.dbsqlite;

import org.greenrobot.greendao.annotation.*;

import it.cascino.dbsqlite.DaoSession;

import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "QTY_ORIGINALI".
 */
@Entity(active = true)
public class Qty_originali{

	@Id(autoincrement = true)
	private Long id;
	private float qty;
	private float qty_difettosi;
	private String data_carico;
	private String data_scarico;
	private String data_inventario;
	private Float qty_scorta_min;
	private Float qty_scorta_max;
	private long idart;
	private long iddep;

	/**
	 * Used to resolve relations
	 */
	@Generated
	private transient DaoSession daoSession;

	/**
	 * Used for active entity operations.
	 */
	@Generated
	private transient Qty_originaliDao myDao;

	@ToOne(joinProperty = "idart")
	private Articoli articoli;

	@Generated
	private transient Long articoli__resolvedKey;

	@ToOne(joinProperty = "iddep")
	private Depositi depositi;

	@Generated
	private transient Long depositi__resolvedKey;

	// KEEP FIELDS - put your custom fields here
	// KEEP FIELDS END

	@Generated
	public Qty_originali(){
	}

	public Qty_originali(Long id){
		this.id = id;
	}

	@Generated
	public Qty_originali(Long id, float qty, float qty_difettosi, String data_carico, String data_scarico, String data_inventario, Float qty_scorta_min, Float qty_scorta_max, long idart, long iddep){
		this.id = id;
		this.qty = qty;
		this.qty_difettosi = qty_difettosi;
		this.data_carico = data_carico;
		this.data_scarico = data_scarico;
		this.data_inventario = data_inventario;
		this.qty_scorta_min = qty_scorta_min;
		this.qty_scorta_max = qty_scorta_max;
		this.idart = idart;
		this.iddep = iddep;
	}

	/**
	 * called by internal mechanisms, do not call yourself.
	 */
	@Generated
	public void __setDaoSession(DaoSession daoSession){
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getQty_originaliDao() : null;
	}

	public Long getId(){
		return id;
	}

	public void setId(Long id){
		this.id = id;
	}

	public float getQty(){
		return qty;
	}

	public void setQty(float qty){
		this.qty = qty;
	}

	public float getQty_difettosi(){
		return qty_difettosi;
	}

	public void setQty_difettosi(float qty_difettosi){
		this.qty_difettosi = qty_difettosi;
	}

	public String getData_carico(){
		return data_carico;
	}

	public void setData_carico(String data_carico){
		this.data_carico = data_carico;
	}

	public String getData_scarico(){
		return data_scarico;
	}

	public void setData_scarico(String data_scarico){
		this.data_scarico = data_scarico;
	}

	public String getData_inventario(){
		return data_inventario;
	}

	public void setData_inventario(String data_inventario){
		this.data_inventario = data_inventario;
	}

	public Float getQty_scorta_min(){
		return qty_scorta_min;
	}

	public void setQty_scorta_min(Float qty_scorta_min){
		this.qty_scorta_min = qty_scorta_min;
	}

	public Float getQty_scorta_max(){
		return qty_scorta_max;
	}

	public void setQty_scorta_max(Float qty_scorta_max){
		this.qty_scorta_max = qty_scorta_max;
	}

	public long getIdart(){
		return idart;
	}

	public void setIdart(long idart){
		this.idart = idart;
	}

	public long getIddep(){
		return iddep;
	}

	public void setIddep(long iddep){
		this.iddep = iddep;
	}

	/**
	 * To-one relationship, resolved on first access.
	 */
	@Generated
	public Articoli getArticoli(){
		long __key = this.idart;
		if(articoli__resolvedKey == null || !articoli__resolvedKey.equals(__key)){
			__throwIfDetached();
			ArticoliDao targetDao = daoSession.getArticoliDao();
			Articoli articoliNew = targetDao.load(__key);
			synchronized(this){
				articoli = articoliNew;
				articoli__resolvedKey = __key;
			}
		}
		return articoli;
	}

	@Generated
	public void setArticoli(Articoli articoli){
		if(articoli == null){
			throw new DaoException("To-one property 'idart' has not-null constraint; cannot set to-one to null");
		}
		synchronized(this){
			this.articoli = articoli;
			idart = articoli.getId();
			articoli__resolvedKey = idart;
		}
	}

	/**
	 * To-one relationship, resolved on first access.
	 */
	@Generated
	public Depositi getDepositi(){
		long __key = this.iddep;
		if(depositi__resolvedKey == null || !depositi__resolvedKey.equals(__key)){
			__throwIfDetached();
			DepositiDao targetDao = daoSession.getDepositiDao();
			Depositi depositiNew = targetDao.load(__key);
			synchronized(this){
				depositi = depositiNew;
				depositi__resolvedKey = __key;
			}
		}
		return depositi;
	}

	@Generated
	public void setDepositi(Depositi depositi){
		if(depositi == null){
			throw new DaoException("To-one property 'iddep' has not-null constraint; cannot set to-one to null");
		}
		synchronized(this){
			this.depositi = depositi;
			iddep = depositi.getId();
			depositi__resolvedKey = iddep;
		}
	}

	/**
	 * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
	 * Entity must attached to an entity context.
	 */
	@Generated
	public void delete(){
		__throwIfDetached();
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
	 * Entity must attached to an entity context.
	 */
	@Generated
	public void update(){
		__throwIfDetached();
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
	 * Entity must attached to an entity context.
	 */
	@Generated
	public void refresh(){
		__throwIfDetached();
		myDao.refresh(this);
	}

	@Generated
	private void __throwIfDetached(){
		if(myDao == null){
			throw new DaoException("Entity is detached from DAO context");
		}
	}

	// KEEP METHODS - put your custom methods here
	// KEEP METHODS END

}
