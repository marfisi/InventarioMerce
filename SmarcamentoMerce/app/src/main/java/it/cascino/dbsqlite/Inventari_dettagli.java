package it.cascino.dbsqlite;

import org.greenrobot.greendao.annotation.*;

import it.cascino.dbsqlite.DaoSession;

import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "INVENTARI_DETTAGLI".
 */
@Entity(active = true)
public class Inventari_dettagli{

	@Id(autoincrement = true)
	private Long id;
	private Float qty_esposta;
	private Float qty_magaz;
	private Float qty_difettosi;
	private Float qty_scorta_min;
	private Float qty_scorta_max;
	private Float prezzo;
	private String commento;

	@NotNull
	private String stato;

	@NotNull
	private String timestamp;
	private String desc;
	private int posizioneinlista;
	private Float qty_per_confez;
	private String barcode;
	private long idtestata;
	private long idart;

	/**
	 * Used to resolve relations
	 */
	@Generated
	private transient DaoSession daoSession;

	/**
	 * Used for active entity operations.
	 */
	@Generated
	private transient Inventari_dettagliDao myDao;

	@ToOne(joinProperty = "idtestata")
	private Inventari_testate inventari_testate;

	@Generated
	private transient Long inventari_testate__resolvedKey;

	@ToOne(joinProperty = "idart")
	private Articoli articoli;

	@Generated
	private transient Long articoli__resolvedKey;

	// KEEP FIELDS - put your custom fields here
	// KEEP FIELDS END

	@Generated
	public Inventari_dettagli(){
	}

	public Inventari_dettagli(Long id){
		this.id = id;
	}

	@Generated
	public Inventari_dettagli(Long id, Float qty_esposta, Float qty_magaz, Float qty_difettosi, Float qty_scorta_min, Float qty_scorta_max, Float prezzo, String commento, String stato, String timestamp, String desc, int posizioneinlista, Float qty_per_confez, String barcode, long idtestata, long idart){
		this.id = id;
		this.qty_esposta = qty_esposta;
		this.qty_magaz = qty_magaz;
		this.qty_difettosi = qty_difettosi;
		this.qty_scorta_min = qty_scorta_min;
		this.qty_scorta_max = qty_scorta_max;
		this.prezzo = prezzo;
		this.commento = commento;
		this.stato = stato;
		this.timestamp = timestamp;
		this.desc = desc;
		this.posizioneinlista = posizioneinlista;
		this.qty_per_confez = qty_per_confez;
		this.barcode = barcode;
		this.idtestata = idtestata;
		this.idart = idart;
	}

	/**
	 * called by internal mechanisms, do not call yourself.
	 */
	@Generated
	public void __setDaoSession(DaoSession daoSession){
		this.daoSession = daoSession;
		myDao = daoSession != null ? daoSession.getInventari_dettagliDao() : null;
	}

	public Long getId(){
		return id;
	}

	public void setId(Long id){
		this.id = id;
	}

	public Float getQty_esposta(){
		return qty_esposta;
	}

	public void setQty_esposta(Float qty_esposta){
		this.qty_esposta = qty_esposta;
	}

	public Float getQty_magaz(){
		return qty_magaz;
	}

	public void setQty_magaz(Float qty_magaz){
		this.qty_magaz = qty_magaz;
	}

	public Float getQty_difettosi(){
		return qty_difettosi;
	}

	public void setQty_difettosi(Float qty_difettosi){
		this.qty_difettosi = qty_difettosi;
	}

	public Float getQty_scorta_min(){
		return qty_scorta_min;
	}

	public void setQty_scorta_min(Float qty_scorta_min){
		this.qty_scorta_min = qty_scorta_min;
	}

	public Float getQty_scorta_max(){
		return qty_scorta_max;
	}

	public void setQty_scorta_max(Float qty_scorta_max){
		this.qty_scorta_max = qty_scorta_max;
	}

	public Float getPrezzo(){
		return prezzo;
	}

	public void setPrezzo(Float prezzo){
		this.prezzo = prezzo;
	}

	public String getCommento(){
		return commento;
	}

	public void setCommento(String commento){
		this.commento = commento;
	}

	@NotNull
	public String getStato(){
		return stato;
	}

	/**
	 * Not-null value; ensure this value is available before it is saved to the database.
	 */
	public void setStato(@NotNull String stato){
		this.stato = stato;
	}

	@NotNull
	public String getTimestamp(){
		return timestamp;
	}

	/**
	 * Not-null value; ensure this value is available before it is saved to the database.
	 */
	public void setTimestamp(@NotNull String timestamp){
		this.timestamp = timestamp;
	}

	public String getDesc(){
		return desc;
	}

	public void setDesc(String desc){
		this.desc = desc;
	}

	public int getPosizioneinlista(){
		return posizioneinlista;
	}

	public void setPosizioneinlista(int posizioneinlista){
		this.posizioneinlista = posizioneinlista;
	}

	public Float getQty_per_confez(){
		return qty_per_confez;
	}

	public void setQty_per_confez(Float qty_per_confez){
		this.qty_per_confez = qty_per_confez;
	}

	public String getBarcode(){
		return barcode;
	}

	public void setBarcode(String barcode){
		this.barcode = barcode;
	}

	public long getIdtestata(){
		return idtestata;
	}

	public void setIdtestata(long idtestata){
		this.idtestata = idtestata;
	}

	public long getIdart(){
		return idart;
	}

	public void setIdart(long idart){
		this.idart = idart;
	}

	/**
	 * To-one relationship, resolved on first access.
	 */
	@Generated
	public Inventari_testate getInventari_testate(){
		long __key = this.idtestata;
		if(inventari_testate__resolvedKey == null || !inventari_testate__resolvedKey.equals(__key)){
			__throwIfDetached();
			Inventari_testateDao targetDao = daoSession.getInventari_testateDao();
			Inventari_testate inventari_testateNew = targetDao.load(__key);
			synchronized(this){
				inventari_testate = inventari_testateNew;
				inventari_testate__resolvedKey = __key;
			}
		}
		return inventari_testate;
	}

	@Generated
	public void setInventari_testate(Inventari_testate inventari_testate){
		if(inventari_testate == null){
			throw new DaoException("To-one property 'idtestata' has not-null constraint; cannot set to-one to null");
		}
		synchronized(this){
			this.inventari_testate = inventari_testate;
			idtestata = inventari_testate.getId();
			inventari_testate__resolvedKey = idtestata;
		}
	}

	/**
	 * To-one relationship, resolved on first access.
	 */
	@Generated
	public Articoli getArticoli(){
		long __key = this.idart;
		if(articoli__resolvedKey == null || !articoli__resolvedKey.equals(__key)){
			__throwIfDetached();
			ArticoliDao targetDao = daoSession.getArticoliDao();
			Articoli articoliNew = targetDao.load(__key);
			synchronized(this){
				articoli = articoliNew;
				articoli__resolvedKey = __key;
			}
		}
		return articoli;
	}

	@Generated
	public void setArticoli(Articoli articoli){
		if(articoli == null){
			throw new DaoException("To-one property 'idart' has not-null constraint; cannot set to-one to null");
		}
		synchronized(this){
			this.articoli = articoli;
			idart = articoli.getId();
			articoli__resolvedKey = idart;
		}
	}

	/**
	 * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
	 * Entity must attached to an entity context.
	 */
	@Generated
	public void delete(){
		__throwIfDetached();
		myDao.delete(this);
	}

	/**
	 * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
	 * Entity must attached to an entity context.
	 */
	@Generated
	public void update(){
		__throwIfDetached();
		myDao.update(this);
	}

	/**
	 * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
	 * Entity must attached to an entity context.
	 */
	@Generated
	public void refresh(){
		__throwIfDetached();
		myDao.refresh(this);
	}

	@Generated
	private void __throwIfDetached(){
		if(myDao == null){
			throw new DaoException("Entity is detached from DAO context");
		}
	}

	// KEEP METHODS - put your custom methods here
	// KEEP METHODS END

}
