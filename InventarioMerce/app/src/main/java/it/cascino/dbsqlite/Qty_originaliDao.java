package it.cascino.dbsqlite;

import java.util.List;
import java.util.ArrayList;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "QTY_ORIGINALI".
 */
public class Qty_originaliDao extends AbstractDao<Qty_originali, Long>{

	public static final String TABLENAME = "QTY_ORIGINALI";

	/**
	 * Properties of entity Qty_originali.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties{
		public final static Property Id = new Property(0, Long.class, "id", true, "_id");
		public final static Property Qty = new Property(1, float.class, "qty", false, "QTY");
		public final static Property Qty_difettosi = new Property(2, float.class, "qty_difettosi", false, "QTY_DIFETTOSI");
		public final static Property Data_carico = new Property(3, String.class, "data_carico", false, "DATA_CARICO");
		public final static Property Data_scarico = new Property(4, String.class, "data_scarico", false, "DATA_SCARICO");
		public final static Property Data_inventario = new Property(5, String.class, "data_inventario", false, "DATA_INVENTARIO");
		public final static Property Qty_scorta_min = new Property(6, Float.class, "qty_scorta_min", false, "QTY_SCORTA_MIN");
		public final static Property Qty_scorta_max = new Property(7, Float.class, "qty_scorta_max", false, "QTY_SCORTA_MAX");
		public final static Property Idart = new Property(8, long.class, "idart", false, "IDART");
		public final static Property Iddep = new Property(9, long.class, "iddep", false, "IDDEP");
	}

	private DaoSession daoSession;


	public Qty_originaliDao(DaoConfig config){
		super(config);
	}

	public Qty_originaliDao(DaoConfig config, DaoSession daoSession){
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists){
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"QTY_ORIGINALI\" (" + //
				"\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
				"\"QTY\" REAL NOT NULL ," + // 1: qty
				"\"QTY_DIFETTOSI\" REAL NOT NULL ," + // 2: qty_difettosi
				"\"DATA_CARICO\" TEXT," + // 3: data_carico
				"\"DATA_SCARICO\" TEXT," + // 4: data_scarico
				"\"DATA_INVENTARIO\" TEXT," + // 5: data_inventario
				"\"QTY_SCORTA_MIN\" REAL," + // 6: qty_scorta_min
				"\"QTY_SCORTA_MAX\" REAL," + // 7: qty_scorta_max
				"\"IDART\" INTEGER NOT NULL ," + // 8: idart
				"\"IDDEP\" INTEGER NOT NULL );"); // 9: iddep
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists){
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QTY_ORIGINALI\"";
		db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, Qty_originali entity){
		stmt.clearBindings();

		Long id = entity.getId();
		if(id != null){
			stmt.bindLong(1, id);
		}
		stmt.bindDouble(2, entity.getQty());
		stmt.bindDouble(3, entity.getQty_difettosi());

		String data_carico = entity.getData_carico();
		if(data_carico != null){
			stmt.bindString(4, data_carico);
		}

		String data_scarico = entity.getData_scarico();
		if(data_scarico != null){
			stmt.bindString(5, data_scarico);
		}

		String data_inventario = entity.getData_inventario();
		if(data_inventario != null){
			stmt.bindString(6, data_inventario);
		}

		Float qty_scorta_min = entity.getQty_scorta_min();
		if(qty_scorta_min != null){
			stmt.bindDouble(7, qty_scorta_min);
		}

		Float qty_scorta_max = entity.getQty_scorta_max();
		if(qty_scorta_max != null){
			stmt.bindDouble(8, qty_scorta_max);
		}
		stmt.bindLong(9, entity.getIdart());
		stmt.bindLong(10, entity.getIddep());
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, Qty_originali entity){
		stmt.clearBindings();

		Long id = entity.getId();
		if(id != null){
			stmt.bindLong(1, id);
		}
		stmt.bindDouble(2, entity.getQty());
		stmt.bindDouble(3, entity.getQty_difettosi());

		String data_carico = entity.getData_carico();
		if(data_carico != null){
			stmt.bindString(4, data_carico);
		}

		String data_scarico = entity.getData_scarico();
		if(data_scarico != null){
			stmt.bindString(5, data_scarico);
		}

		String data_inventario = entity.getData_inventario();
		if(data_inventario != null){
			stmt.bindString(6, data_inventario);
		}

		Float qty_scorta_min = entity.getQty_scorta_min();
		if(qty_scorta_min != null){
			stmt.bindDouble(7, qty_scorta_min);
		}

		Float qty_scorta_max = entity.getQty_scorta_max();
		if(qty_scorta_max != null){
			stmt.bindDouble(8, qty_scorta_max);
		}
		stmt.bindLong(9, entity.getIdart());
		stmt.bindLong(10, entity.getIddep());
	}

	@Override
	protected final void attachEntity(Qty_originali entity){
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	@Override
	public Long readKey(Cursor cursor, int offset){
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	@Override
	public Qty_originali readEntity(Cursor cursor, int offset){
		Qty_originali entity = new Qty_originali( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.getFloat(offset + 1), // qty
				cursor.getFloat(offset + 2), // qty_difettosi
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // data_carico
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // data_scarico
				cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // data_inventario
				cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // qty_scorta_min
				cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // qty_scorta_max
				cursor.getLong(offset + 8), // idart
				cursor.getLong(offset + 9) // iddep
		);
		return entity;
	}

	@Override
	public void readEntity(Cursor cursor, Qty_originali entity, int offset){
		entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
		entity.setQty(cursor.getFloat(offset + 1));
		entity.setQty_difettosi(cursor.getFloat(offset + 2));
		entity.setData_carico(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
		entity.setData_scarico(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
		entity.setData_inventario(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
		entity.setQty_scorta_min(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
		entity.setQty_scorta_max(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
		entity.setIdart(cursor.getLong(offset + 8));
		entity.setIddep(cursor.getLong(offset + 9));
	}

	@Override
	protected final Long updateKeyAfterInsert(Qty_originali entity, long rowId){
		entity.setId(rowId);
		return rowId;
	}

	@Override
	public Long getKey(Qty_originali entity){
		if(entity != null){
			return entity.getId();
		}else{
			return null;
		}
	}

	@Override
	public boolean hasKey(Qty_originali entity){
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable(){
		return true;
	}

	private String selectDeep;

	protected String getSelectDeep(){
		if(selectDeep == null){
			StringBuilder builder = new StringBuilder("SELECT ");
			SqlUtils.appendColumns(builder, "T", getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T0", daoSession.getArticoliDao().getAllColumns());
			builder.append(',');
			SqlUtils.appendColumns(builder, "T1", daoSession.getDepositiDao().getAllColumns());
			builder.append(" FROM QTY_ORIGINALI T");
			builder.append(" LEFT JOIN ARTICOLI T0 ON T.\"IDART\"=T0.\"_id\"");
			builder.append(" LEFT JOIN DEPOSITI T1 ON T.\"IDDEP\"=T1.\"_id\"");
			builder.append(' ');
			selectDeep = builder.toString();
		}
		return selectDeep;
	}

	protected Qty_originali loadCurrentDeep(Cursor cursor, boolean lock){
		Qty_originali entity = loadCurrent(cursor, 0, lock);
		int offset = getAllColumns().length;

		Articoli articoli = loadCurrentOther(daoSession.getArticoliDao(), cursor, offset);
		if(articoli != null){
			entity.setArticoli(articoli);
		}
		offset += daoSession.getArticoliDao().getAllColumns().length;

		Depositi depositi = loadCurrentOther(daoSession.getDepositiDao(), cursor, offset);
		if(depositi != null){
			entity.setDepositi(depositi);
		}

		return entity;
	}

	public Qty_originali loadDeep(Long key){
		assertSinglePk();
		if(key == null){
			return null;
		}

		StringBuilder builder = new StringBuilder(getSelectDeep());
		builder.append("WHERE ");
		SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
		String sql = builder.toString();

		String[] keyArray = new String[]{key.toString()};
		Cursor cursor = db.rawQuery(sql, keyArray);

		try{
			boolean available = cursor.moveToFirst();
			if(!available){
				return null;
			}else if(!cursor.isLast()){
				throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
			}
			return loadCurrentDeep(cursor, true);
		}finally{
			cursor.close();
		}
	}

	/**
	 * Reads all available rows from the given cursor and returns a list of new ImageTO objects.
	 */
	public List<Qty_originali> loadAllDeepFromCursor(Cursor cursor){
		int count = cursor.getCount();
		List<Qty_originali> list = new ArrayList<Qty_originali>(count);

		if(cursor.moveToFirst()){
			if(identityScope != null){
				identityScope.lock();
				identityScope.reserveRoom(count);
			}
			try{
				do{
					list.add(loadCurrentDeep(cursor, false));
				}while(cursor.moveToNext());
			}finally{
				if(identityScope != null){
					identityScope.unlock();
				}
			}
		}
		return list;
	}

	protected List<Qty_originali> loadDeepAllAndCloseCursor(Cursor cursor){
		try{
			return loadAllDeepFromCursor(cursor);
		}finally{
			cursor.close();
		}
	}


	/**
	 * A raw-style query where you can pass any WHERE clause and arguments.
	 */
	public List<Qty_originali> queryDeep(String where, String... selectionArg){
		Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
		return loadDeepAllAndCloseCursor(cursor);
	}

}
