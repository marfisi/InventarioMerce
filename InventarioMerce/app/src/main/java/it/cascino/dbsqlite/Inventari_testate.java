package it.cascino.dbsqlite;

import org.greenrobot.greendao.annotation.*;

import it.cascino.dbsqlite.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "INVENTARI_TESTATE".
 */
@Entity(active = true)
public class Inventari_testate {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String utente_creatore;

    @NotNull
    private String utente_destinatario;

    @NotNull
    private String data_creazione;
    private String data_modifica;
    private String data_conferma;

    @NotNull
    private String stato;
    private String commento;
    private String nome_file;
    private long iddep;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient Inventari_testateDao myDao;

    @ToOne(joinProperty = "iddep")
    private Depositi depositi;

    @Generated
    private transient Long depositi__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Inventari_testate() {
    }

    public Inventari_testate(Long id) {
        this.id = id;
    }

    @Generated
    public Inventari_testate(Long id, String utente_creatore, String utente_destinatario, String data_creazione, String data_modifica, String data_conferma, String stato, String commento, String nome_file, long iddep) {
        this.id = id;
        this.utente_creatore = utente_creatore;
        this.utente_destinatario = utente_destinatario;
        this.data_creazione = data_creazione;
        this.data_modifica = data_modifica;
        this.data_conferma = data_conferma;
        this.stato = stato;
        this.commento = commento;
        this.nome_file = nome_file;
        this.iddep = iddep;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getInventari_testateDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getUtente_creatore() {
        return utente_creatore;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUtente_creatore(@NotNull String utente_creatore) {
        this.utente_creatore = utente_creatore;
    }

    @NotNull
    public String getUtente_destinatario() {
        return utente_destinatario;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUtente_destinatario(@NotNull String utente_destinatario) {
        this.utente_destinatario = utente_destinatario;
    }

    @NotNull
    public String getData_creazione() {
        return data_creazione;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setData_creazione(@NotNull String data_creazione) {
        this.data_creazione = data_creazione;
    }

    public String getData_modifica() {
        return data_modifica;
    }

    public void setData_modifica(String data_modifica) {
        this.data_modifica = data_modifica;
    }

    public String getData_conferma() {
        return data_conferma;
    }

    public void setData_conferma(String data_conferma) {
        this.data_conferma = data_conferma;
    }

    @NotNull
    public String getStato() {
        return stato;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setStato(@NotNull String stato) {
        this.stato = stato;
    }

    public String getCommento() {
        return commento;
    }

    public void setCommento(String commento) {
        this.commento = commento;
    }

    public String getNome_file() {
        return nome_file;
    }

    public void setNome_file(String nome_file) {
        this.nome_file = nome_file;
    }

    public long getIddep() {
        return iddep;
    }

    public void setIddep(long iddep) {
        this.iddep = iddep;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Depositi getDepositi() {
        long __key = this.iddep;
        if (depositi__resolvedKey == null || !depositi__resolvedKey.equals(__key)) {
            __throwIfDetached();
            DepositiDao targetDao = daoSession.getDepositiDao();
            Depositi depositiNew = targetDao.load(__key);
            synchronized (this) {
                depositi = depositiNew;
            	depositi__resolvedKey = __key;
            }
        }
        return depositi;
    }

    @Generated
    public void setDepositi(Depositi depositi) {
        if (depositi == null) {
            throw new DaoException("To-one property 'iddep' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.depositi = depositi;
            iddep = depositi.getId();
            depositi__resolvedKey = iddep;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
