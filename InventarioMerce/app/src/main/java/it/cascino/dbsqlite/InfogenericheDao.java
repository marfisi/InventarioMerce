package it.cascino.dbsqlite;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "INFOGENERICHE".
 */
public class InfogenericheDao extends AbstractDao<Infogeneriche, Long>{

	public static final String TABLENAME = "INFOGENERICHE";

	/**
	 * Properties of entity Infogeneriche.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties{
		public final static Property Id = new Property(0, Long.class, "id", true, "_id");
		public final static Property Info = new Property(1, String.class, "info", false, "INFO");
		public final static Property Valore = new Property(2, String.class, "valore", false, "VALORE");
	}


	public InfogenericheDao(DaoConfig config){
		super(config);
	}

	public InfogenericheDao(DaoConfig config, DaoSession daoSession){
		super(config, daoSession);
	}

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(Database db, boolean ifNotExists){
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"INFOGENERICHE\" (" + //
				"\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
				"\"INFO\" TEXT NOT NULL ," + // 1: info
				"\"VALORE\" TEXT NOT NULL );"); // 2: valore
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(Database db, boolean ifExists){
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INFOGENERICHE\"";
		db.execSQL(sql);
	}

	@Override
	protected final void bindValues(DatabaseStatement stmt, Infogeneriche entity){
		stmt.clearBindings();

		Long id = entity.getId();
		if(id != null){
			stmt.bindLong(1, id);
		}
		stmt.bindString(2, entity.getInfo());
		stmt.bindString(3, entity.getValore());
	}

	@Override
	protected final void bindValues(SQLiteStatement stmt, Infogeneriche entity){
		stmt.clearBindings();

		Long id = entity.getId();
		if(id != null){
			stmt.bindLong(1, id);
		}
		stmt.bindString(2, entity.getInfo());
		stmt.bindString(3, entity.getValore());
	}

	@Override
	public Long readKey(Cursor cursor, int offset){
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	@Override
	public Infogeneriche readEntity(Cursor cursor, int offset){
		Infogeneriche entity = new Infogeneriche( //
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.getString(offset + 1), // info
				cursor.getString(offset + 2) // valore
		);
		return entity;
	}

	@Override
	public void readEntity(Cursor cursor, Infogeneriche entity, int offset){
		entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
		entity.setInfo(cursor.getString(offset + 1));
		entity.setValore(cursor.getString(offset + 2));
	}

	@Override
	protected final Long updateKeyAfterInsert(Infogeneriche entity, long rowId){
		entity.setId(rowId);
		return rowId;
	}

	@Override
	public Long getKey(Infogeneriche entity){
		if(entity != null){
			return entity.getId();
		}else{
			return null;
		}
	}

	@Override
	public boolean hasKey(Infogeneriche entity){
		return entity.getId() != null;
	}

	@Override
	protected final boolean isEntityUpdateable(){
		return true;
	}

}
