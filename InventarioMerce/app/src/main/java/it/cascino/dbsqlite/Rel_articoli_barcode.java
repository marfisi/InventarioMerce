package it.cascino.dbsqlite;

import org.greenrobot.greendao.annotation.*;

import it.cascino.dbsqlite.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "REL_ARTICOLI_BARCODE".
 */
@Entity(active = true)
public class Rel_articoli_barcode {
    private long idart;
    private long idbc;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient Rel_articoli_barcodeDao myDao;

    @ToOne(joinProperty = "idbc")
    private Barcode barcode;

    @Generated
    private transient Long barcode__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Rel_articoli_barcode() {
    }

    @Generated
    public Rel_articoli_barcode(long idart, long idbc) {
        this.idart = idart;
        this.idbc = idbc;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRel_articoli_barcodeDao() : null;
    }

    public long getIdart() {
        return idart;
    }

    public void setIdart(long idart) {
        this.idart = idart;
    }

    public long getIdbc() {
        return idbc;
    }

    public void setIdbc(long idbc) {
        this.idbc = idbc;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Barcode getBarcode() {
        long __key = this.idbc;
        if (barcode__resolvedKey == null || !barcode__resolvedKey.equals(__key)) {
            __throwIfDetached();
            BarcodeDao targetDao = daoSession.getBarcodeDao();
            Barcode barcodeNew = targetDao.load(__key);
            synchronized (this) {
                barcode = barcodeNew;
            	barcode__resolvedKey = __key;
            }
        }
        return barcode;
    }

    @Generated
    public void setBarcode(Barcode barcode) {
        if (barcode == null) {
            throw new DaoException("To-one property 'idbc' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.barcode = barcode;
            idbc = barcode.getId();
            barcode__resolvedKey = idbc;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
